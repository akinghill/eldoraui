{
  "name": "coberotatetolocation",
  "type": "registry:ui",
  "dependencies": [
    "cobe"
  ],
  "files": [
    {
      "path": "eldoraui/coberotatetolocation.jsx",
      "content": "\"use client\";\nimport createGlobe from \"cobe\";\nimport { useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nexport function CobeDragToLocation() {\n  const canvasRef = useRef();\n  const locationToAngles = (lat, long) => {\n    return [\n      Math.PI - ((long * Math.PI) / 180 - Math.PI / 2),\n      (lat * Math.PI) / 180,\n    ];\n  };\n  const focusRef = useRef([0, 0]);\n  useEffect(() => {\n    let width = 0;\n    let currentPhi = 0;\n    let currentTheta = 0;\n    const doublePi = Math.PI * 2;\n    const onResize = () =>\n      canvasRef.current && (width = canvasRef.current.offsetWidth);\n    window.addEventListener(\"resize\", onResize);\n    onResize();\n    const globe = createGlobe(canvasRef.current, {\n      devicePixelRatio: 2,\n      width: width * 2,\n      height: width * 2,\n      phi: 0,\n      theta: 0.3,\n      dark: 1,\n      diffuse: 3,\n      mapSamples: 16000,\n      mapBrightness: 1.2,\n      baseColor: [1, 1, 1],\n      markerColor: [251 / 255, 200 / 255, 21 / 255],\n      glowColor: [1.2, 1.2, 1.2],\n      markers: [\n        { location: [37.78, -122.412], size: 0.1 },\n        { location: [52.52, 13.405], size: 0.1 },\n        { location: [35.676, 139.65], size: 0.1 },\n        { location: [-34.6, -58.38], size: 0.1 },\n      ],\n      onRender: (state) => {\n        state.phi = currentPhi;\n        state.theta = currentTheta;\n        const [focusPhi, focusTheta] = focusRef.current;\n        const distPositive = (focusPhi - currentPhi + doublePi) % doublePi;\n        const distNegative = (currentPhi - focusPhi + doublePi) % doublePi;\n        // Control the speed\n        if (distPositive < distNegative) {\n          currentPhi += distPositive * 0.08;\n        } else {\n          currentPhi -= distNegative * 0.08;\n        }\n        currentTheta = currentTheta * 0.92 + focusTheta * 0.08;\n        state.width = width * 2;\n        state.height = width * 2;\n      },\n    });\n    setTimeout(() => (canvasRef.current.style.opacity = \"1\"));\n    return () => {\n      globe.destroy();\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, []);\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        maxWidth: 600,\n        aspectRatio: 1,\n        margin: \"auto\",\n        position: \"relative\",\n      }}\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          contain: \"layout paint size\",\n          opacity: 0,\n          transition: \"opacity 1s ease\",\n        }}\n      />\n      <div\n        className=\"control-buttons flex flex-col items-center justify-center md:flex-row\"\n        style={{ gap: \".5rem\" }}\n      >\n        Rotate to:\n        <Button\n          onClick={() => {\n            focusRef.current = locationToAngles(37.78, -122.412);\n          }}\n        >\n          📍 San Francisco{\" \"}\n        </Button>\n        <Button\n          onClick={() => {\n            focusRef.current = locationToAngles(52.52, 13.405);\n          }}\n        >\n          📍 Berlin{\" \"}\n        </Button>\n        <Button\n          onClick={() => {\n            focusRef.current = locationToAngles(35.676, 139.65);\n          }}\n        >\n          📍 Tokyo{\" \"}\n        </Button>\n        <Button\n          onClick={() => {\n            focusRef.current = locationToAngles(-34.6, -58.38);\n          }}\n        >\n          📍 Buenos Aires{\" \"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n<style jsx global>{`\n  .control-buttons button {\n    background: rgba(155, 155, 155, 0.2);\n    border-radius: 9px;\n    gap: 5px;\n    padding: 0.2rem 0.5rem;\n    cursor: pointer;\n  }\n`}</style>;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}