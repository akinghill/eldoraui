{
  "name": "ledcard",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "eldoraui/animatedledcard.tsx",
      "content": "import React, { useEffect, useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst charMap: Record<string, number[][]> = {\n  C: [\n    [0, 1, 1, 1],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n    [0, 1, 1, 1],\n  ],\n  O: [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0],\n  ],\n  P: [\n    [1, 1, 1, 0],\n    [1, 0, 0, 1],\n    [1, 0, 0, 1],\n    [1, 1, 1, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n  ],\n  Y: [\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [0, 1, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n  ],\n  \" \": [\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n    [0, 0],\n  ],\n  0: [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0],\n  ],\n  1: [\n    [0, 0, 1],\n    [0, 1, 1],\n    [1, 0, 1],\n    [0, 0, 1],\n    [0, 0, 1],\n    [0, 0, 1],\n  ],\n  3: [\n    [1, 1, 1, 1, 0],\n    [0, 0, 0, 0, 1],\n    [0, 0, 1, 1, 0],\n    [0, 0, 1, 1, 0],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0],\n  ],\n  2: [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 1, 0, 0, 0],\n    [1, 1, 1, 1, 1],\n  ],\n  4: [\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 1],\n  ],\n  5: [\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 1, 0],\n  ],\n  6: [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0],\n    [1, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0],\n  ],\n  7: [\n    [1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 1, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n    [0, 0, 1, 0, 0],\n  ],\n  8: [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 0],\n  ],\n  9: [\n    [0, 1, 1, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 0, 0, 0, 1],\n    [0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [0, 0, 0, 0, 1],\n  ],\n};\n\nfunction createMatrix(rows: number, cols: number) {\n  return Array(rows)\n    .fill(\"\")\n    .map(() => Array(cols).fill(false));\n}\n\ninterface Board {\n  rows: number;\n  cols: number;\n  matrix: boolean[][];\n}\n\nfunction createBoard(word: string) {\n  const rows = 15;\n  const wordArray = word.trim().toUpperCase().split(\"\");\n  const cols =\n    wordArray\n      // +1 for extra padding\n      .map((char) => (charMap[char] || charMap[\" \"])[0].length + 1)\n      .reduce((a, b) => a + b, 1) * 2;\n\n  const matrix = createMatrix(rows, cols);\n  const startRow = 2;\n  let startCol = 2;\n\n  for (const charIndex in wordArray) {\n    const char = wordArray[charIndex];\n    const charPattern = charMap[char] || charMap[\" \"];\n\n    for (const rowIndex in charPattern) {\n      const row = charPattern[rowIndex];\n      for (const colIndex in row) {\n        const isLit = row[colIndex];\n        if (isLit) {\n          matrix[startRow + +rowIndex * 2][startCol + +colIndex * 2] = true;\n        }\n      }\n    }\n\n    // +1 for extra spacing\n    startCol += (charPattern[0].length + 1) * 2;\n  }\n\n  return {\n    rows,\n    cols,\n    matrix,\n  };\n}\n\nexport default function LEDBoard({\n  word = \"COPY\",\n}: {\n  /**\n   * The word to display on the LED board.\n   * Currently only supports \"C\", \"O\",\"P\", \" and \"Y\". But you can add more in the `charMap` object.\n   */\n  word: string;\n}) {\n  const [{ rows, cols, matrix }, setBoard] = useState<Board>(createBoard(word));\n\n  useEffect(() => setBoard(createBoard(word)), [word]);\n\n  const [isHovering, setIsHovering] = useState(false);\n  const [, setForceUpdate] = useState(0);\n\n  useEffect(() => {\n    if (isHovering) {\n      return;\n    }\n\n    const interval = setInterval(() => {\n      // Force a re-render so the random dots are animated\n      setForceUpdate((current) => current + 1);\n      // max animation duration is 3000ms (2000ms + 1000ms)\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [isHovering]);\n\n  return (\n    <div\n      className=\"group rounded-xl border border-gray-600 bg-gradient-to-bl from-zinc-950/80 via-zinc-900 via-30% to-zinc-950 to-75% p-4 dark:border-zinc-800\"\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n    >\n      <svg\n        className=\"h-auto w-full text-zinc-800\"\n        viewBox={`0 0 ${cols - 1} ${rows}`}\n      >\n        {matrix.map((row, rowIndex) =>\n          row.map((isLit, colIndex) => {\n            // Hide all odd rows and columns\n            if (rowIndex % 2 === 1 || colIndex % 2 === 1) {\n              return null;\n            }\n\n            const shouldAnimate = !isHovering && isLit && Math.random() > 0.8;\n            let delay = 0;\n            if (shouldAnimate) {\n              delay = Math.floor(Math.random() * 1000);\n            }\n\n            return (\n              <circle\n                key={`${rowIndex}-${colIndex}`}\n                cx={colIndex + 0.25}\n                cy={rowIndex + 0.25}\n                r={0.25}\n                style={{\n                  transitionDelay: !isHovering ? `${colIndex * 15}ms` : \"0ms\",\n                  animationDuration: \"2000ms\",\n                  animationDelay: `${delay}ms`,\n                }}\n                className={cn(\n                  \"fill-zinc-800 transition-all duration-200 ease-in-out\",\n                  {\n                    \"group-hover:fill-purple-500\": isLit,\n                    \"animate-led ease-in-out\": shouldAnimate,\n                  },\n                )}\n              />\n            );\n          }),\n        )}\n      </svg>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}